## Модуль №1
## Основы программирования


# Привет! Я рад помочь тебе разобраться в основах программирования с самого начала, как если бы ты никогда не сталкивался с этим миром. Постараюсь объяснить всё максимально подробно и понятно. Давай представим, что мы с тобой находимся в классе, и ты впервые услышал слово «программирование». Готов? Поехали!

# Что такое программирование?
# Программирование — это процесс создания программ, которые дают компьютеру команды на выполнение определённых действий. Программа — это набор инструкций, который компьютер выполняет в точной последовательности. Компьютер сам по себе ничего не понимает, он выполняет команды, которые ему задаёт человек — программист. Задача программиста — написать такие команды (или инструкции), чтобы компьютер мог выполнить их правильно и последовательно.

# Программист использует специальный язык программирования, который понятен компьютеру. Это как общение с компьютером на его языке. Существует множество языков программирования (например, Python, C++, Java и т. д.), и все они используются для различных целей. Язык программирования можно сравнить с иностранным языком, только предназначенным для общения с машинами.

# Теперь, когда мы определились, что такое программирование, давай разберём, из чего оно состоит.

# Основные понятия в программировании
# Прежде чем приступить к программированию, нужно понять несколько ключевых понятий. Эти понятия встречаются в любом языке программирования.








# 1. Переменные
# Переменные — это один из самых базовых элементов программирования. Представь переменные как ящики, в которых можно хранить какие-то значения. Например, числа, слова или даже более сложные вещи.

# Каждая переменная имеет имя (чтобы ты мог к ней обращаться) и значение (это то, что ты в ней хранишь). Имя переменной должно быть уникальным, и оно помогает программе отличать одну переменную от другой.







# Пример:


# x = 5
# Здесь мы создали переменную с именем x, и она хранит в себе число 5. Теперь, если нам нужно использовать это число где-то в коде, мы можем обращаться к x.








# 2. Типы данных
# Переменные могут хранить различные типы данных. Вот несколько основных типов данных:

# Числа (целые числа и числа с плавающей точкой): Например, 5 или 3.14.
# Строки: Это текст, например, "Привет, мир!".
# Логические значения (True/False): Это значения, которые используются для проверки условий. Например, True означает «истина», а False — «ложь».
# Каждый тип данных служит для определённых целей. Например, если ты хочешь хранить возраст человека, ты будешь использовать число, а если его имя — строку.






# Пример:



# age = 25      # переменная хранит целое число
# name = "Alex" # переменная хранит строку (текст)
# is_student = True # переменная хранит логическое значение





# 3. Операции и операторы
# Операции и операторы — это действия, которые программа может выполнять с переменными. Основные операции включают:

# Арифметические операторы (сложение, вычитание, умножение, деление и т. д.):
# Пример: x + y (сложение переменных x и y)
# Операторы сравнения (больше, меньше, равно и т. д.):
# Пример: x == y (проверка, равны ли значения x и y)
# Логические операторы (и, или, не):
# Пример: x > 5 and y < 10 (проверка условия, что x больше 5 и y меньше 10)
# 4. Условные операторы
# Часто в программах нужно принимать решения, что делать дальше, в зависимости от какого-то условия. Например, если возраст человека больше 18 лет, можно разрешить ему доступ к сайту, иначе — запретить. Это реализуется с помощью условных операторов.







# Пример:


# if age >= 18:
#     print("Доступ разрешён")
# else:
#     print("Доступ запрещён")
# Здесь программа проверяет, больше ли значение переменной age или равно 18. Если это правда, она выводит сообщение "Доступ разрешён", иначе — "Доступ запрещён".









# 5. Циклы
# Циклы позволяют повторять одно и то же действие несколько раз. Например, ты можешь попросить компьютер вывести на экран числа от 1 до 10. Для этого не нужно писать десять строк кода — достаточно одного цикла.







# Пример:


# for i in range(1, 11):
#     print(i)
# Цикл for пробегает по значениям от 1 до 10 и выводит их по одному на экран.

# Пример 1. Вывод текста
# Теперь давай рассмотрим простой пример программы, которая выводит текст на экран.








# Пример:


# print("Привет, мир!")


# Разберём этот код:
# print() — это встроенная функция, которая выводит текст на экран. Всё, что ты напишешь в круглых скобках, будет выведено на экран.
# "Привет, мир!" — это строка (текст), которую мы хотим вывести.
# Когда программа выполнит этот код, ты увидишь на экране фразу «Привет, мир!».



# Объяснение:
# Мы вызвали функцию print, которая принимает аргумент — строку (текст), заключённую в кавычки. Эта строка передаётся функции, и она выводит её на экран.
# Пример 2. Работа с переменными и условием
# Теперь рассмотрим пример программы, которая спрашивает у пользователя возраст и выводит, является ли пользователь совершеннолетним.










# Пример:


# age = int(input("Введите ваш возраст: "))

# if age >= 18:
#     print("Вы совершеннолетний!")
# else:
#     print("Вы ещё не совершеннолетний.")


# Разберём этот код:
# input() — это функция, которая запрашивает ввод у пользователя. Всё, что введёт пользователь, будет считаться строкой.
# int() — это функция, которая преобразует строку в число, потому что возраст — это числовое значение.
# if age >= 18 — это условие, которое проверяет, достиг ли возраст пользователя 18 лет.
# print() — функция, которая выводит текст на экран в зависимости от выполнения условия.



# Объяснение:
# Сначала программа запрашивает возраст пользователя через input(). Пользователь вводит число.
# Функция int() преобразует введённую строку в число.
# Программа проверяет, больше ли это число 18 или равно 18 с помощью условия if.
# Если условие выполняется (возраст больше или равен 18), программа выводит "Вы совершеннолетний!". Если нет — "Вы ещё не совершеннолетний."
# Итог
# Теперь ты познакомился с основными понятиями программирования: переменными, типами данных, операциями, условиями и циклами. Это базовые кирпичики, на которых строится любой код. Программирование — это как создание конструктора: ты используешь разные детали, чтобы собрать нужную программу.







# Два рассмотренных примера — это простейшие программы, но на их основе можно строить более сложные и интересные программы, которые смогут решать различные задачи.






## Модуль №2
## Как работает компьютерная программа?









## Модуль №3
## Из чего состоит язык?









## Модуль №4
## Компиляция и интерпретация









## Модуль №5
## Что на самом деле делает интерпретатор?









## Модуль №6
## Компиляция и интерпретация —
## преимущества и недостатки









## Модуль №7
## Что такое Python?









## Модуль №8
## Кто создал Python?









## Модуль №9
## Цели Python









## Модуль №10
## Почему Python особенный?









## Модуль №11
## Конкуренты Python?









## Модуль №12
## Где мы можем увидеть Python в действии?









## Модуль №13
## Python ака CPython









## Модуль №14
## Cython









## Модуль №15
## Jython









## Модуль №16
## PyPy и RPython









## Модуль №17
## Литералы Python










## Модуль №18
## Литералы — данные в себе









## Модуль №19
## Целые числа (Integers)









## Модуль №20
## Целые числа: восьмеричные
## и шестнадцатеричные числа








## Модуль №21
## Числа с плавающей точкой
## (Floating-point numbers)









## Модуль №22
## Кодирование чисел с плавающей точкой








## Модуль №23
## Строки








## Модуль №24
## Кодирование строк








## Модуль №25
## Булевы значения (логические типы данных)









## Модуль №26
## Ключевые выводы








## Модуль №27
## Операторы — инструменты управления данными









## Модуль №28
## Python как калькулятор








## Модуль №29
## Основные операторы









## Модуль №30
## Арифметические операторы:
## возведение в степень









## Модуль №31
## Арифметические операторы: умножение









## Модуль №32
## Арифметические операторы: деление









## Модуль №33
## Арифметические операторы:
## целочисленное деление








## Модуль №34
## Операторы: остаток
## (деление по модулю, с остатком)










## Модуль №35
## Операторы: как не делить









## Модуль №36
## Операторы: суммирование










## Модуль №37
## Оператор вычитания,
## унарные и бинарные операторы









## Модуль №38
## Операторы и их приоритеты









## Модуль №39
## Операторы и связывание









## Модуль №40
## Операторы и связывание: возведение в степень









## Модуль №41
## Список приоритетов









## Модуль №42
## Операторы и скобки









## Модуль №43
## Переменные — поля в форме данных
## Что такое переменные?










## Модуль №44
## Правильные и неправильные имена переменных
## Ключевые слова













## Модуль №45
## Создание переменных












## Модуль №46
## Использование переменных













## Модуль №47
## Присвоение нового значения
## уже существующей переменной


















## Модуль №48
## Решение простых математических задач
















## Модуль №49
## Сокращенные формы записи
























## Модуль №50
## Ключевые выводы






























## Модуль №51
## Комментарий к комментариям
























## Модуль №52
## Комментарии в коде: зачем, как и когда





























## Модуль №53
## Ключевые выводы
































## Модуль №54
## Как общаться с компьютером
## Функция ввода input()
## Функция input() с аргументом
## Результат функции input()

## Функция input() — запрещенные операции





















## Модуль №55
## Преобразование типов



























## Модуль №56
## Больше об input() и преобразовании типов



























## Модуль №57
## Строковые операторы — введение


























## Модуль №58
## Конкатенация (concatenation)

























## Модуль №59
## Повторение строки (replication)






















## Модуль №60
## Преобразование типов: str()



























## Модуль №61
## Снова возвращаемся
## к прямоугольному треугольнику




























## Модуль №62




































## Модуль №63




























## Модуль №64



































## Модуль №65


























## Модуль №66



























## Модуль №67

























## Модуль №68





























## Модуль №69




































## Модуль №70































## Модуль №71
