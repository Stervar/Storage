## Модуль №1
## Основы программирования


# Привет! Я рад помочь тебе разобраться в основах программирования с самого начала, как если бы ты никогда не сталкивался с этим миром.
#  Постараюсь объяснить всё максимально подробно и понятно.
#  Давай представим, что мы с тобой находимся в классе, и ты впервые услышал слово «программирование». 
# Готов? Поехали!

# Что такое программирование?
# Программирование — это процесс создания программ, которые дают компьютеру команды на выполнение определённых действий. 
# Программа — это набор инструкций, который компьютер выполняет в точной последовательности. 
# Компьютер сам по себе ничего не понимает, он выполняет команды, которые ему задаёт человек — программист. Задача программиста — написать такие команды (или инструкции), чтобы компьютер мог выполнить их правильно и последовательно.

# Программист использует специальный язык программирования, который понятен компьютеру. 
# Это как общение с компьютером на его языке. 
# Существует множество языков программирования (например, Python, C++, Java и т. д.), и все они используются для различных целей. 
# Язык программирования можно сравнить с иностранным языком, только предназначенным для общения с машинами.

# Теперь, когда мы определились, что такое программирование, давай разберём, из чего оно состоит.

# Основные понятия в программировании
# Прежде чем приступить к программированию, нужно понять несколько ключевых понятий. 
# Эти понятия встречаются в любом языке программирования.








# 1. Переменные
# Переменные — это один из самых базовых элементов программирования. 
# Представь переменные как ящики, в которых можно хранить какие-то значения. 
# Например, числа, слова или даже более сложные вещи.

# Каждая переменная имеет имя (чтобы ты мог к ней обращаться) и значение (это то, что ты в ней хранишь). 
# Имя переменной должно быть уникальным, и оно помогает программе отличать одну переменную от другой.







# Пример:


# x = 5
# Здесь мы создали переменную с именем x, и она хранит в себе число 5. 
# Теперь, если нам нужно использовать это число где-то в коде, мы можем обращаться к x.








# 2. Типы данных
# Переменные могут хранить различные типы данных. 
# Вот несколько основных типов данных:

# Числа (целые числа и числа с плавающей точкой): Например, 5 или 3.14.
# Строки: Это текст, например, "Привет, мир!".
# Логические значения (True/False): Это значения, которые используются для проверки условий. Например, True означает «истина», а False — «ложь».
# Каждый тип данных служит для определённых целей. Например, если ты хочешь хранить возраст человека, ты будешь использовать число, а если его имя — строку.






# Пример:



# age = 25      # переменная хранит целое число
# name = "Alex" # переменная хранит строку (текст)
# is_student = True # переменная хранит логическое значение





# 3. Операции и операторы
# Операции и операторы — это действия, которые программа может выполнять с переменными. Основные операции включают:

# Арифметические операторы (сложение, вычитание, умножение, деление и т. д.):
# Пример: x + y (сложение переменных x и y)
# Операторы сравнения (больше, меньше, равно и т. д.):
# Пример: x == y (проверка, равны ли значения x и y)
# Логические операторы (и, или, не):
# Пример: x > 5 and y < 10 (проверка условия, что x больше 5 и y меньше 10)
# 4. Условные операторы
# Часто в программах нужно принимать решения, что делать дальше, в зависимости от какого-то условия. 
# Например, если возраст человека больше 18 лет, можно разрешить ему доступ к сайту, иначе — запретить. 
# Это реализуется с помощью условных операторов.







# Пример:


# if age >= 18:
#     print("Доступ разрешён")
# else:
#     print("Доступ запрещён")
# Здесь программа проверяет, больше ли значение переменной age или равно 18. Если это правда, она выводит сообщение "Доступ разрешён", иначе — "Доступ запрещён".









# 5. Циклы
# Циклы позволяют повторять одно и то же действие несколько раз.
#  Например, ты можешь попросить компьютер вывести на экран числа от 1 до 10.
#  Для этого не нужно писать десять строк кода — достаточно одного цикла.




# Пример:


# for i in range(1, 11):
#     print(i)
# Цикл for пробегает по значениям от 1 до 10 и выводит их по одному на экран.








# Пример 1. Вывод текста
# Теперь давай рассмотрим простой пример программы, которая выводит текст на экран.



# Пример:


# print("Привет, мир!")


# Разберём этот код:
# print() — это встроенная функция, которая выводит текст на экран. Всё, что ты напишешь в круглых скобках, будет выведено на экран.
# "Привет, мир!" — это строка (текст), которую мы хотим вывести.
# Когда программа выполнит этот код, ты увидишь на экране фразу «Привет, мир!».



# Объяснение:
# Мы вызвали функцию print, которая принимает аргумент — строку (текст), заключённую в кавычки.
#  Эта строка передаётся функции, и она выводит её на экран.






# Пример 2. Работа с переменными и условием
# Теперь рассмотрим пример программы, которая спрашивает у пользователя возраст и выводит, является ли пользователь совершеннолетним.



# Пример:


# age = int(input("Введите ваш возраст: "))

# if age >= 18:
#     print("Вы совершеннолетний!")
# else:
#     print("Вы ещё не совершеннолетний.")


# Разберём этот код:
# input() — это функция, которая запрашивает ввод у пользователя. Всё, что введёт пользователь, будет считаться строкой.
# int() — это функция, которая преобразует строку в число, потому что возраст — это числовое значение.
# if age >= 18 — это условие, которое проверяет, достиг ли возраст пользователя 18 лет.
# print() — функция, которая выводит текст на экран в зависимости от выполнения условия.



# Объяснение:
# Сначала программа запрашивает возраст пользователя через input(). Пользователь вводит число.
# Функция int() преобразует введённую строку в число.
# Программа проверяет, больше ли это число 18 или равно 18 с помощью условия if.
# Если условие выполняется (возраст больше или равен 18), программа выводит "Вы совершеннолетний!". Если нет — "Вы ещё не совершеннолетний."



# Итог:

# Теперь ты познакомился с основными понятиями программирования: переменными, типами данных, операциями, условиями и циклами. 
# Это базовые кирпичики, на которых строится любой код. 
# Программирование — это как создание конструктора: ты используешь разные детали, чтобы собрать нужную программу.







# Два рассмотренных примера — это простейшие программы, но на их основе можно строить более сложные и интересные программы, которые смогут решать различные задачи.






## Модуль №2
## Как работает компьютерная программа?






# Представь, что мы начинаем с самого начала.
#  Ты никогда не сталкивался с программированием, и перед тобой стоит вопрос: как вообще работает компьютерная программа? 
# Давай разбираться шаг за шагом, начиная с самых базовых понятий и объясняя всё детально.

# Что такое компьютерная программа?
# Компьютерная программа — это набор инструкций, которые выполняет компьютер для того, чтобы достичь какой-то цели или решить конкретную задачу. Эти инструкции написаны на языке, понятном компьютеру, а их выполнение контролируется центральным процессором компьютера.

# Проще говоря, программа — это как рецепт, который говорит компьютеру, что нужно делать. Рецепт может быть очень простым (например, показать текст на экране) или сложным (управлять самолётом или анализировать данные с миллионов датчиков). Но в любом случае программа — это просто набор последовательных команд.

# Из чего состоит программа?
# Любая программа состоит из таких элементов, как:

# Команды или инструкции — это действия, которые компьютер должен выполнить.
# Данные — это информация, с которой работает программа. Это могут быть числа, текст, изображения или что угодно.
# Операции — это действия, которые программа выполняет над данными (например, сложение чисел, проверка условий, сравнение значений).
# Поток управления — это порядок, в котором выполняются инструкции программы. Компьютер выполняет инструкции одну за другой, как будто он читает рецепт по шагам.
# Как программа взаимодействует с компьютером?
# Теперь представь себе компьютер как огромную машину, которая состоит из нескольких важных частей. Чтобы понять, как работает программа, нужно знать о двух ключевых компонентах компьютера:

# Процессор (CPU) — это "мозг" компьютера. Процессор отвечает за выполнение всех инструкций программы. Он может обрабатывать данные, выполнять математические операции, управлять памятью и контролировать, какие команды исполнять в следующую очередь.
# Память (RAM) — это место, где хранится временная информация, с которой работает программа. Когда программа запускается, она загружает свои данные и инструкции в память, чтобы процессор мог получить к ним быстрый доступ.
# Когда программа запускается, происходит следующее:

# Программа загружается в оперативную память (RAM) с жёсткого диска или другого устройства хранения.
# Процессор считывает первую инструкцию программы.
# Процессор выполняет эту инструкцию, например, сложение двух чисел или вывод текста на экран.
# Процессор переходит к следующей инструкции и так далее.
# Как компьютер понимает программу?
# Компьютер не понимает человеческий язык. Вместо этого он работает с машинным кодом — набором команд, которые состоят из нулей и единиц (бинарный код). Эти команды напрямую управляют процессором.

# Однако программисту было бы сложно писать программы на таком низком уровне, поэтому используются языки программирования — это своего рода переводчики между человеком и машиной. Программисты пишут код на языке, который понятен человеку (например, Python, Java или C++), а специальная программа (компилятор или интерпретатор) переводит этот код в машинный язык, который понимает процессор.

# Есть два основных типа программ, которые обрабатывают код:

# Компиляторы — они берут весь код программы и сразу переводят его в машинный код, создавая исполняемый файл (например, в Windows это файл с расширением .exe). После компиляции программа может запускаться без компилятора.

# Интерпретаторы — они обрабатывают код построчно, сразу выполняя команды. Пример интерпретируемого языка — Python. Каждая команда программы выполняется немедленно, как только она интерпретируется.

# Основные этапы работы программы
# Давай разберём основные этапы работы программы:

# Написание кода: Программист пишет код на языке программирования. Этот код содержит инструкции, которые компьютер должен выполнить.

# Компиляция/интерпретация: Код переводится в машинный язык (или исполняется напрямую, как в случае интерпретации).

# Загрузка в память: Программа загружается в оперативную память. Это позволяет процессору получить доступ к инструкциям и данным программы.

# Выполнение: Процессор начинает выполнять инструкции программы одну за другой. Он может выполнять арифметические операции, проверять условия, работать с памятью и управлять различными устройствами (например, клавиатурой или экраном).

# Хранение данных: Программа может сохранять данные на диске (например, файлы) или работать с временными данными в оперативной памяти.

# Вывод результатов: Программа может выводить данные на экран, отправлять их в файл или по сети. Это конечный результат её работы.

# Пример: Простая программа вывода текста
# Теперь, когда у нас есть базовое понимание того, как работает программа, давай посмотрим на первый простой пример программы. Мы напишем программу, которая просто выведет текст на экран.

# Пример 1:

# python
# Копировать код
# print("Привет, мир!")
# Что здесь происходит?

# print — это функция. Функция — это как мини-программа внутри программы, которая выполняет определённое действие. В данном случае функция print отвечает за вывод текста на экран.

# "Привет, мир!" — это строка текста, которую мы хотим вывести. Строка всегда заключается в кавычки, чтобы программа понимала, что это текст.

# Когда ты запускаешь эту программу, она выполнит единственное действие: выведет на экран текст "Привет, мир!".

# Как программа принимает данные от пользователя?
# Теперь давай посмотрим на более интересный пример программы, где пользователь может ввести данные, а программа их обработает.

# Пример 2:

# python
# Копировать код
# name = input("Введите ваше имя: ")
# print("Привет, " + name + "!")
# Здесь уже немного сложнее, но давай разберём по частям.

# input() — это функция, которая позволяет пользователю ввести текст с клавиатуры. То, что введёт пользователь, сохраняется в переменную name.

# name — это переменная. Переменная — это как коробка, в которую можно положить какие-то данные. В данном случае в переменной name хранится имя пользователя, которое он ввёл.

# print("Привет, " + name + "!") — здесь снова используется функция print, но теперь она выводит не только заранее заданный текст, но и значение переменной name. Знак + соединяет (конкатенирует) строки, то есть создаёт единый текст из нескольких частей: "Привет, ", имя пользователя и "!".

# Когда программа запустится, она сначала попросит ввести имя. Пользователь введёт, например, "Алексей", и программа выведет "Привет, Алексей!".

# Объяснение работы программы:
# Программа начинает выполнение с вызова функции input(), которая выводит на экран сообщение "Введите ваше имя:". Пользователь вводит текст, и этот текст сохраняется в переменной name.

# Затем программа вызывает функцию print(). Она выводит строку "Привет, " и добавляет значение переменной name (то есть имя пользователя), а затем добавляет восклицательный знак.

# Важные аспекты работы программы
# Теперь давай обсудим несколько важных аспектов того, как работают программы:

# 1. Алгоритм — это последовательность шагов, которые программа выполняет для решения задачи. Каждый шаг должен быть точно определён и выполняться в строго определённом порядке.
# Пример: если ты хочешь приготовить пирог, сначала нужно смешать ингредиенты, затем поместить их в духовку и подождать определённое время. То же самое происходит в программах: нужно точно определить порядок действий.

# 2. Ошибки — иногда программы не работают так, как задумано. Это может произойти из-за ошибок в коде, неправильных данных или неожиданных ситуаций (например, пользователь ввёл текст вместо числа). Такие ошибки называются "багами", и их нужно исправлять. Программисты часто сталкиваются с багами и занимаются их поиском и исправлением (этот процесс называется "отладка").
# 3. Оптимизация — это процесс улучшения программы, чтобы она выполнялась быстрее или использовала меньше ресурсов (например, памяти или процессорного времени).
# Заключение
# Теперь ты имеешь общее представление о том, как работает компьютерная программа. Мы прошли путь от простого понимания, что программа — это набор инструкций для компьютера, до рассмотрения конкретных примеров кода. Программы состоят из данных и инструкций, которые процессор выполняет шаг за шагом. Программисты пишут эти инструкции на специальных языках программирования, которые затем переводятся в машинный код, понятный компьютеру.

# Мы также увидели два примера кода, где программа сначала просто выводит текст, а затем взаимодействует с пользователем.









## Модуль №3
## Из чего состоит язык программирования [Python]?

# Язык программирования — это набор правил и синтаксиса, с помощью которого человек может давать инструкции компьютеру. Если представить компьютер как исполнителя, то язык программирования — это его язык. Python — это один из популярных языков программирования, который разработан так, чтобы быть понятным даже новичкам, но в то же время остаётся мощным инструментом для профессионалов.

# Теперь давай детально разберём, из чего состоит язык программирования на примере Python. Мы будем изучать основные компоненты языка, которые составляют фундамент для написания программ.

# Основные компоненты языка программирования Python
# Переменные
# Типы данных
# Операторы
# Функции
# Условные операторы
# Циклы
# Модули и библиотеки
# Комментарии
# Обработка ошибок
# Ввод и вывод
# 1. Переменные
# Переменные — это имена, которым мы можем присваивать значения. Представь их как "коробки", в которые мы кладём информацию. Эти "коробки" могут хранить числа, строки текста, списки, и другие типы данных.

# Пример:

# python
# Копировать код
# name = "Иван"  # Переменная name хранит строку "Иван"
# age = 25       # Переменная age хранит число 25
# name — это переменная, которая хранит строку текста "Иван".
# age — это переменная, которая хранит число 25.
# 2. Типы данных
# Тип данных определяет, какую информацию хранит переменная. В Python есть несколько типов данных:

# int — целые числа (например, 1, 2, -3).
# float — числа с плавающей точкой (например, 1.5, -0.7).
# str — строки текста (например, "Привет", "123").
# bool — логические значения (например, True или False).
# Пример:

# python
# Копировать код
# height = 1.75  # Число с плавающей точкой (float)
# is_student = True  # Логическое значение (bool)
# height — это число с плавающей точкой (высота человека).
# is_student — переменная, которая хранит логическое значение True.
# 3. Операторы
# Операторы — это символы, которые выполняют определённые действия с переменными и значениями. Они бывают:

# Арифметические операторы: сложение (+), вычитание (-), умножение (*), деление (/).
# Операторы сравнения: равно (==), не равно (!=), больше (>), меньше (<).
# Логические операторы: and (и), or (или), not (не).
# Пример:

# python
# Копировать код
# x = 10
# y = 5
# result = x + y  # Сложение (result будет 15)
# is_greater = x > y  # Проверяем, больше ли x, чем y (будет True)
# x + y — это арифметическое сложение.
# x > y — оператор сравнения, проверяет, больше ли x.
# 4. Функции
# Функции — это блоки кода, которые выполняют определённую задачу и могут быть вызваны в любом месте программы. Python имеет встроенные функции (например, print()) и позволяет создавать собственные.

# Пример встроенной функции:

# python
# Копировать код
# print("Привет, мир!")  # Выводит текст на экран
# Пример пользовательской функции:

# python
# Копировать код
# def greet(name):
#     print("Привет, " + name)

# greet("Иван")  # Вызов функции, которая выведет: Привет, Иван
# greet(name) — это функция, которая принимает аргумент name и выводит приветствие.
# 5. Условные операторы
# Условные операторы позволяют программе принимать решения на основе определённых условий. В Python это делается с помощью конструкций if, elif и else.

# Пример:

# python
# Копировать код
# age = 20
# if age >= 18:
#     print("Ты совершеннолетний.")
# else:
#     print("Ты несовершеннолетний.")
# Программа проверяет, больше ли возраст 18, и выводит соответствующее сообщение.
# 6. Циклы
# Циклы позволяют выполнять одну и ту же операцию несколько раз. В Python существуют два основных вида циклов: for и while.

# Пример цикла for:

# python
# Копировать код
# for i in range(5):  # Цикл выполняется 5 раз
#     print(i)  # Выводит числа от 0 до 4
# Цикл for выполняется 5 раз и выводит значения от 0 до 4.
# Пример цикла while:

# python
# Копировать код
# counter = 0
# while counter < 5:
#     print(counter)
#     counter += 1  # Увеличиваем значение переменной counter на 1
# Цикл while выполняется, пока значение переменной counter меньше 5.
# 7. Модули и библиотеки
# Python позволяет использовать готовые модули и библиотеки, которые содержат функции и классы для выполнения различных задач. Ты можешь импортировать их с помощью ключевого слова import.

# Пример:

# python
# Копировать код
# import math  # Импортируем модуль для работы с математическими функциями

# result = math.sqrt(16)  # Используем функцию sqrt для нахождения квадратного корня
# print(result)  # Выведет 4
# Модуль math содержит множество полезных математических функций, например, для нахождения квадратного корня.
# 8. Комментарии
# Комментарии — это части кода, которые игнорируются интерпретатором, но важны для программиста, чтобы объяснить или описать, что делает код. В Python комментарии начинаются с символа #.

# Пример:

# python
# Копировать код
# # Это комментарий, который объясняет, что происходит дальше
# print("Привет, мир!")  # Выводим текст на экран
# Комментарий начинается с символа # и помогает пояснить код.
# 9. Обработка ошибок
# Программы могут сталкиваться с ошибками, и чтобы они не "падали", важно уметь их обрабатывать. В Python это делается с помощью конструкции try и except.

# Пример:

# python
# Копировать код
# try:
#     number = int(input("Введите число: "))  # Пробуем преобразовать ввод в число
# except ValueError:
#     print("Это не число!")
# Программа пытается преобразовать ввод пользователя в число. Если это не удаётся (например, пользователь ввёл текст), программа выводит сообщение об ошибке.
# 10. Ввод и вывод
# Ввод данных от пользователя осуществляется с помощью функции input(), а вывод на экран — с помощью функции print().

# Пример:

# python
# Копировать код
# name = input("Введите своё имя: ")  # Получаем ввод от пользователя
# print("Привет, " + name)  # Выводим приветствие с именем пользователя
# Функция input() запрашивает ввод, а print() выводит текст на экран.
# Два простых примера кода с пояснениями
# Пример 1: Программа, которая выводит приветствие
# python
# Копировать код
# name = input("Введите своё имя: ")  # Получаем имя пользователя через ввод
# print("Привет, " + name + "!")  # Выводим приветствие с именем пользователя
# Пояснение:

# name = input("Введите своё имя: "): Эта строка просит пользователя ввести своё имя. Функция input() позволяет ввести данные с клавиатуры, а результат сохраняется в переменную name.
# print("Привет, " + name + "!"): Здесь программа выводит текст "Привет, [имя]!", используя функцию print() и объединение строки с переменной name.
# Пример 2: Программа, которая считает сумму двух чисел
# python
# Копировать код
# a = int(input("Введите первое число: "))  # Получаем первое число от пользователя
# b = int(input("Введите второе число: "))  # Получаем второе число от пользователя
# summa = a + b  # Считаем сумму
# print("Сумма чисел:", summa)  # Выводим результат
# Пояснение:

# a = int(input("Введите первое число: ")): Программа запрашивает у пользователя первое число и преобразует его в целое число с помощью функции int().
# b = int(input("Введите второе число: ")): Запрашивается второе число.
# summa = a + b: Программа складывает два числа и сохраняет результат в переменную summa.
# print("Сумма чисел:", summa): Выводит сумму двух чисел на экран.
# Заключение
# Язык программирования Python состоит из множества компонентов, каждый из которых играет свою роль в создании программы. Мы разобрали такие основные элементы, как переменные, типы данных, операторы, функции, циклы, и модули. Python разработан так, чтобы быть простым и понятным, что делает его отличным выбором для начинающих.










## Модуль №4
## Компиляция и интерпретация [Python]









## Модуль №5
## Что на самом деле делает интерпретатор [Python]?









## Модуль №6
## Компиляция и интерпретация —
## преимущества и недостатки [Python]









## Модуль №7
## Что такое Python?









## Модуль №8
## Кто создал Python?









## Модуль №9
## Цели Python









## Модуль №10
## Почему Python особенный?









## Модуль №11
## Конкуренты Python?









## Модуль №12
## Где мы можем увидеть Python в действии?









## Модуль №13
## Python ака CPython









## Модуль №14
## Cython









## Модуль №15
## Jython









## Модуль №16
## PyPy и RPython









## Модуль №17
## Литералы Python










## Модуль №18
## Литералы — данные в себе [Python]









## Модуль №19
## Целые числа (Integers) [Python]









## Модуль №20
## Целые числа: восьмеричные
## и шестнадцатеричные числа [Python]








## Модуль №21
## Числа с плавающей точкой
## (Floating-point numbers) [Python]









## Модуль №22
## Кодирование чисел с плавающей точкой [Python]








## Модуль №23
## Строки [Python]








## Модуль №24
## Кодирование строк [Python]








## Модуль №25
## Булевы значения (логические типы данных) [Python]









## Модуль №26
## Ключевые выводы [Python]








## Модуль №27
## Операторы — инструменты управления данными [Python]









## Модуль №28
## Python как калькулятор [Python]








## Модуль №29
## Основные операторы [Python]









## Модуль №30
## Арифметические операторы:
## возведение в степень [Python]









## Модуль №31
## Арифметические операторы: умножение [Python]









## Модуль №32
## Арифметические операторы: деление [Python]









## Модуль №33
## Арифметические операторы:
## целочисленное деление [Python]








## Модуль №34
## Операторы: остаток
## (деление по модулю, с остатком) [Python]










## Модуль №35
## Операторы: как не делить [Python]









## Модуль №36
## Операторы: суммирование [Python]










## Модуль №37
## Оператор вычитания,
## унарные и бинарные операторы [Python]









## Модуль №38
## Операторы и их приоритеты [Python]









## Модуль №39
## Операторы и связывание [Python]









## Модуль №40
## Операторы и связывание: возведение в степень [Python]









## Модуль №41
## Список приоритетов [Python]









## Модуль №42
## Операторы и скобки [Python]









## Модуль №43
## Переменные — поля в форме данных
## Что такое переменные [Python]? 










## Модуль №44
## Правильные и неправильные имена переменных
## Ключевые слова [Python]













## Модуль №45
## Создание переменных [Python]












## Модуль №46
## Использование переменных [Python]













## Модуль №47
## Присвоение нового значения
## уже существующей переменной [Python]


















## Модуль №48
## Решение простых математических задач [Python]
















## Модуль №49
## Сокращенные формы записи [Python]
























## Модуль №50
## Ключевые выводы [Python]






























## Модуль №51
## Комментарий к комментариям [Python]
























## Модуль №52
## Комментарии в коде: зачем, как и когда [Python]





























## Модуль №53
## Ключевые выводы [Python]
































## Модуль №54
## Как общаться с компьютером [Python]

















## Модуль №55
## Функция ввода input() [Python]



























## Модуль №56
## Функция input() с аргументом [Python]



























## Модуль №57
## Результат функции input() [Python]

























## Модуль №58
## Функция input() — запрещенные операции [Python]





















## Модуль №59
## Преобразование типов [Python]



























## Модуль №60
## Больше об input() и преобразовании типов [Python]



























## Модуль №61
## Строковые операторы — введение [Python]


























## Модуль №62
## Конкатенация (concatenation) [Python]

























## Модуль №63
## Повторение строки (replication) [Python]






















## Модуль №64
## Преобразование типов: str() [Python]



























## Модуль №65
## Снова возвращаемся
## к прямоугольному треугольнику [Python]




























## Модуль №66




































## Модуль №67




























## Модуль №68



































## Модуль №69


























## Модуль №70



























## Модуль №71

























## Модуль №72





























## Модуль №73




































## Модуль №74































## Модуль №75
